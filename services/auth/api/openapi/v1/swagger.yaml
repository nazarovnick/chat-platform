basePath: /api/v1
definitions:
  dto.HTTPError:
    properties:
      code:
        type: integer
      message:
        example: error description
        type: string
    type: object
  dto.HealthResponse:
    properties:
      status:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: ivan.petrov@example.com
        type: string
      password:
        example: superpassword123
        type: string
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
    type: object
  dto.LogoutResponse:
    properties:
      message:
        example: Logout successfully
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: ivan.petrov@example.com
        type: string
      name:
        example: Ivan Petrov
        type: string
      password:
        example: superpassword123
        type: string
    type: object
  dto.RegisterResponse:
    properties:
      email:
        example: ivan.petrov@example.com
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the authentication microservice API for the Chat Platform.
    It provides user registration, authentication, and related features.
  title: Auth Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Login a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate user session or access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LogoutResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Logout a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Register a new user
      tags:
      - auth
  /healthz/liveness:
    get:
      consumes:
      - application/json
      description: Endpoint for checking if the application is live
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Kubernetes liveness probe
      tags:
      - health
  /healthz/readiness:
    get:
      consumes:
      - application/json
      description: Endpoint for checking if the application is ready
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HealthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Kubernetes readiness probe
      tags:
      - health
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
