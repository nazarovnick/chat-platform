// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	session "github.com/nazarovnick/chat-platform/services/auth/internal/entity/session"
	mock "github.com/stretchr/testify/mock"

	user "github.com/nazarovnick/chat-platform/services/auth/internal/entity/user"
)

// SessionRepo is an autogenerated mock type for the SessionRepo type
type SessionRepo struct {
	mock.Mock
}

type SessionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepo) EXPECT() *SessionRepo_Expecter {
	return &SessionRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *SessionRepo) Create(_a0 context.Context, _a1 *session.Session) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.Session) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SessionRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *session.Session
func (_e *SessionRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *SessionRepo_Create_Call {
	return &SessionRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *SessionRepo_Create_Call) Run(run func(_a0 context.Context, _a1 *session.Session)) *SessionRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.Session))
	})
	return _c
}

func (_c *SessionRepo_Create_Call) Return(_a0 error) *SessionRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepo_Create_Call) RunAndReturn(run func(context.Context, *session.Session) error) *SessionRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRefreshToken provides a mock function with given fields: _a0, _a1
func (_m *SessionRepo) GetByRefreshToken(_a0 context.Context, _a1 session.RefreshTokenHash) (*session.Session, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByRefreshToken")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, session.RefreshTokenHash) (*session.Session, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, session.RefreshTokenHash) *session.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, session.RefreshTokenHash) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepo_GetByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRefreshToken'
type SessionRepo_GetByRefreshToken_Call struct {
	*mock.Call
}

// GetByRefreshToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 session.RefreshTokenHash
func (_e *SessionRepo_Expecter) GetByRefreshToken(_a0 interface{}, _a1 interface{}) *SessionRepo_GetByRefreshToken_Call {
	return &SessionRepo_GetByRefreshToken_Call{Call: _e.mock.On("GetByRefreshToken", _a0, _a1)}
}

func (_c *SessionRepo_GetByRefreshToken_Call) Run(run func(_a0 context.Context, _a1 session.RefreshTokenHash)) *SessionRepo_GetByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(session.RefreshTokenHash))
	})
	return _c
}

func (_c *SessionRepo_GetByRefreshToken_Call) Return(_a0 *session.Session, _a1 error) *SessionRepo_GetByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepo_GetByRefreshToken_Call) RunAndReturn(run func(context.Context, session.RefreshTokenHash) (*session.Session, error)) *SessionRepo_GetByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySessionID provides a mock function with given fields: _a0, _a1
func (_m *SessionRepo) GetBySessionID(_a0 context.Context, _a1 session.SessionID) (*session.Session, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBySessionID")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, session.SessionID) (*session.Session, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, session.SessionID) *session.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, session.SessionID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepo_GetBySessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySessionID'
type SessionRepo_GetBySessionID_Call struct {
	*mock.Call
}

// GetBySessionID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 session.SessionID
func (_e *SessionRepo_Expecter) GetBySessionID(_a0 interface{}, _a1 interface{}) *SessionRepo_GetBySessionID_Call {
	return &SessionRepo_GetBySessionID_Call{Call: _e.mock.On("GetBySessionID", _a0, _a1)}
}

func (_c *SessionRepo_GetBySessionID_Call) Run(run func(_a0 context.Context, _a1 session.SessionID)) *SessionRepo_GetBySessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(session.SessionID))
	})
	return _c
}

func (_c *SessionRepo_GetBySessionID_Call) Return(_a0 *session.Session, _a1 error) *SessionRepo_GetBySessionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepo_GetBySessionID_Call) RunAndReturn(run func(context.Context, session.SessionID) (*session.Session, error)) *SessionRepo_GetBySessionID_Call {
	_c.Call.Return(run)
	return _c
}

// Invalidate provides a mock function with given fields: _a0, _a1
func (_m *SessionRepo) Invalidate(_a0 context.Context, _a1 session.SessionID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Invalidate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, session.SessionID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepo_Invalidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invalidate'
type SessionRepo_Invalidate_Call struct {
	*mock.Call
}

// Invalidate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 session.SessionID
func (_e *SessionRepo_Expecter) Invalidate(_a0 interface{}, _a1 interface{}) *SessionRepo_Invalidate_Call {
	return &SessionRepo_Invalidate_Call{Call: _e.mock.On("Invalidate", _a0, _a1)}
}

func (_c *SessionRepo_Invalidate_Call) Run(run func(_a0 context.Context, _a1 session.SessionID)) *SessionRepo_Invalidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(session.SessionID))
	})
	return _c
}

func (_c *SessionRepo_Invalidate_Call) Return(_a0 error) *SessionRepo_Invalidate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepo_Invalidate_Call) RunAndReturn(run func(context.Context, session.SessionID) error) *SessionRepo_Invalidate_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateAll provides a mock function with given fields: _a0, _a1
func (_m *SessionRepo) InvalidateAll(_a0 context.Context, _a1 user.UserID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepo_InvalidateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateAll'
type SessionRepo_InvalidateAll_Call struct {
	*mock.Call
}

// InvalidateAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 user.UserID
func (_e *SessionRepo_Expecter) InvalidateAll(_a0 interface{}, _a1 interface{}) *SessionRepo_InvalidateAll_Call {
	return &SessionRepo_InvalidateAll_Call{Call: _e.mock.On("InvalidateAll", _a0, _a1)}
}

func (_c *SessionRepo_InvalidateAll_Call) Run(run func(_a0 context.Context, _a1 user.UserID)) *SessionRepo_InvalidateAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.UserID))
	})
	return _c
}

func (_c *SessionRepo_InvalidateAll_Call) Return(_a0 error) *SessionRepo_InvalidateAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepo_InvalidateAll_Call) RunAndReturn(run func(context.Context, user.UserID) error) *SessionRepo_InvalidateAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionRepo creates a new instance of SessionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepo {
	mock := &SessionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
