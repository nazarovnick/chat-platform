// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	user "github.com/nazarovnick/chat-platform/services/auth/internal/entity/user"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) Create(_a0 context.Context, _a1 *user.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *user.User
func (_e *UserRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *UserRepo_Create_Call {
	return &UserRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *UserRepo_Create_Call) Run(run func(_a0 context.Context, _a1 *user.User)) *UserRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.User))
	})
	return _c
}

func (_c *UserRepo_Create_Call) Return(_a0 error) *UserRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_Create_Call) RunAndReturn(run func(context.Context, *user.User) error) *UserRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) GetByID(_a0 context.Context, _a1 user.UserID) (*user.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserID) (*user.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.UserID) *user.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 user.UserID
func (_e *UserRepo_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *UserRepo_GetByID_Call {
	return &UserRepo_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *UserRepo_GetByID_Call) Run(run func(_a0 context.Context, _a1 user.UserID)) *UserRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.UserID))
	})
	return _c
}

func (_c *UserRepo_GetByID_Call) Return(_a0 *user.User, _a1 error) *UserRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetByID_Call) RunAndReturn(run func(context.Context, user.UserID) (*user.User, error)) *UserRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLogin provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) GetByLogin(_a0 context.Context, _a1 user.Login) (*user.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByLogin")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.Login) (*user.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.Login) *user.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.Login) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLogin'
type UserRepo_GetByLogin_Call struct {
	*mock.Call
}

// GetByLogin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 user.Login
func (_e *UserRepo_Expecter) GetByLogin(_a0 interface{}, _a1 interface{}) *UserRepo_GetByLogin_Call {
	return &UserRepo_GetByLogin_Call{Call: _e.mock.On("GetByLogin", _a0, _a1)}
}

func (_c *UserRepo_GetByLogin_Call) Run(run func(_a0 context.Context, _a1 user.Login)) *UserRepo_GetByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.Login))
	})
	return _c
}

func (_c *UserRepo_GetByLogin_Call) Return(_a0 *user.User, _a1 error) *UserRepo_GetByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetByLogin_Call) RunAndReturn(run func(context.Context, user.Login) (*user.User, error)) *UserRepo_GetByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
