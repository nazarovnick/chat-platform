// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	session "github.com/nazarovnick/chat-platform/services/auth/internal/entity/session"
	mock "github.com/stretchr/testify/mock"

	user "github.com/nazarovnick/chat-platform/services/auth/internal/entity/user"
)

// SessionLister is an autogenerated mock type for the SessionLister type
type SessionLister struct {
	mock.Mock
}

type SessionLister_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionLister) EXPECT() *SessionLister_Expecter {
	return &SessionLister_Expecter{mock: &_m.Mock}
}

// ListByUser provides a mock function with given fields: _a0, _a1
func (_m *SessionLister) ListByUser(_a0 context.Context, _a1 user.UserID) ([]*session.Session, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserID) ([]*session.Session, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.UserID) []*session.Session); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.UserID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionLister_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type SessionLister_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 user.UserID
func (_e *SessionLister_Expecter) ListByUser(_a0 interface{}, _a1 interface{}) *SessionLister_ListByUser_Call {
	return &SessionLister_ListByUser_Call{Call: _e.mock.On("ListByUser", _a0, _a1)}
}

func (_c *SessionLister_ListByUser_Call) Run(run func(_a0 context.Context, _a1 user.UserID)) *SessionLister_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.UserID))
	})
	return _c
}

func (_c *SessionLister_ListByUser_Call) Return(_a0 []*session.Session, _a1 error) *SessionLister_ListByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionLister_ListByUser_Call) RunAndReturn(run func(context.Context, user.UserID) ([]*session.Session, error)) *SessionLister_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionLister creates a new instance of SessionLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionLister {
	mock := &SessionLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
