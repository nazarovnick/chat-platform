// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	session "github.com/nazarovnick/chat-platform/services/auth/internal/entity/session"
	token "github.com/nazarovnick/chat-platform/services/auth/internal/entity/token"
	mock "github.com/stretchr/testify/mock"

	user "github.com/nazarovnick/chat-platform/services/auth/internal/entity/user"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

type TokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenService) EXPECT() *TokenService_Expecter {
	return &TokenService_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: _a0
func (_m *TokenService) GenerateAccessToken(_a0 *token.AccessTokenClaims) (token.AccessToken, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 token.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(*token.AccessTokenClaims) (token.AccessToken, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*token.AccessTokenClaims) token.AccessToken); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(token.AccessToken)
	}

	if rf, ok := ret.Get(1).(func(*token.AccessTokenClaims) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type TokenService_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - _a0 *token.AccessTokenClaims
func (_e *TokenService_Expecter) GenerateAccessToken(_a0 interface{}) *TokenService_GenerateAccessToken_Call {
	return &TokenService_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", _a0)}
}

func (_c *TokenService_GenerateAccessToken_Call) Run(run func(_a0 *token.AccessTokenClaims)) *TokenService_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*token.AccessTokenClaims))
	})
	return _c
}

func (_c *TokenService_GenerateAccessToken_Call) Return(_a0 token.AccessToken, _a1 error) *TokenService_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_GenerateAccessToken_Call) RunAndReturn(run func(*token.AccessTokenClaims) (token.AccessToken, error)) *TokenService_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateAccessTokenClaims provides a mock function with given fields: _a0
func (_m *TokenService) GenerateAccessTokenClaims(_a0 *user.User) (*token.AccessTokenClaims, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessTokenClaims")
	}

	var r0 *token.AccessTokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (*token.AccessTokenClaims, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*user.User) *token.AccessTokenClaims); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.AccessTokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_GenerateAccessTokenClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessTokenClaims'
type TokenService_GenerateAccessTokenClaims_Call struct {
	*mock.Call
}

// GenerateAccessTokenClaims is a helper method to define mock.On call
//   - _a0 *user.User
func (_e *TokenService_Expecter) GenerateAccessTokenClaims(_a0 interface{}) *TokenService_GenerateAccessTokenClaims_Call {
	return &TokenService_GenerateAccessTokenClaims_Call{Call: _e.mock.On("GenerateAccessTokenClaims", _a0)}
}

func (_c *TokenService_GenerateAccessTokenClaims_Call) Run(run func(_a0 *user.User)) *TokenService_GenerateAccessTokenClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User))
	})
	return _c
}

func (_c *TokenService_GenerateAccessTokenClaims_Call) Return(_a0 *token.AccessTokenClaims, _a1 error) *TokenService_GenerateAccessTokenClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_GenerateAccessTokenClaims_Call) RunAndReturn(run func(*user.User) (*token.AccessTokenClaims, error)) *TokenService_GenerateAccessTokenClaims_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshToken provides a mock function with given fields: _a0
func (_m *TokenService) GenerateRefreshToken(_a0 *token.RefreshTokenClaims) (token.RefreshToken, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 token.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(*token.RefreshTokenClaims) (token.RefreshToken, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*token.RefreshTokenClaims) token.RefreshToken); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(token.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(*token.RefreshTokenClaims) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type TokenService_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - _a0 *token.RefreshTokenClaims
func (_e *TokenService_Expecter) GenerateRefreshToken(_a0 interface{}) *TokenService_GenerateRefreshToken_Call {
	return &TokenService_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", _a0)}
}

func (_c *TokenService_GenerateRefreshToken_Call) Run(run func(_a0 *token.RefreshTokenClaims)) *TokenService_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*token.RefreshTokenClaims))
	})
	return _c
}

func (_c *TokenService_GenerateRefreshToken_Call) Return(_a0 token.RefreshToken, _a1 error) *TokenService_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_GenerateRefreshToken_Call) RunAndReturn(run func(*token.RefreshTokenClaims) (token.RefreshToken, error)) *TokenService_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshTokenClaims provides a mock function with given fields: _a0
func (_m *TokenService) GenerateRefreshTokenClaims(_a0 user.UserID) (*token.RefreshTokenClaims, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshTokenClaims")
	}

	var r0 *token.RefreshTokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(user.UserID) (*token.RefreshTokenClaims, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(user.UserID) *token.RefreshTokenClaims); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.RefreshTokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(user.UserID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_GenerateRefreshTokenClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshTokenClaims'
type TokenService_GenerateRefreshTokenClaims_Call struct {
	*mock.Call
}

// GenerateRefreshTokenClaims is a helper method to define mock.On call
//   - _a0 user.UserID
func (_e *TokenService_Expecter) GenerateRefreshTokenClaims(_a0 interface{}) *TokenService_GenerateRefreshTokenClaims_Call {
	return &TokenService_GenerateRefreshTokenClaims_Call{Call: _e.mock.On("GenerateRefreshTokenClaims", _a0)}
}

func (_c *TokenService_GenerateRefreshTokenClaims_Call) Run(run func(_a0 user.UserID)) *TokenService_GenerateRefreshTokenClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.UserID))
	})
	return _c
}

func (_c *TokenService_GenerateRefreshTokenClaims_Call) Return(_a0 *token.RefreshTokenClaims, _a1 error) *TokenService_GenerateRefreshTokenClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_GenerateRefreshTokenClaims_Call) RunAndReturn(run func(user.UserID) (*token.RefreshTokenClaims, error)) *TokenService_GenerateRefreshTokenClaims_Call {
	_c.Call.Return(run)
	return _c
}

// HashRefreshToken provides a mock function with given fields: _a0
func (_m *TokenService) HashRefreshToken(_a0 token.RefreshToken) (session.RefreshTokenHash, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HashRefreshToken")
	}

	var r0 session.RefreshTokenHash
	var r1 error
	if rf, ok := ret.Get(0).(func(token.RefreshToken) (session.RefreshTokenHash, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(token.RefreshToken) session.RefreshTokenHash); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(session.RefreshTokenHash)
	}

	if rf, ok := ret.Get(1).(func(token.RefreshToken) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_HashRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashRefreshToken'
type TokenService_HashRefreshToken_Call struct {
	*mock.Call
}

// HashRefreshToken is a helper method to define mock.On call
//   - _a0 token.RefreshToken
func (_e *TokenService_Expecter) HashRefreshToken(_a0 interface{}) *TokenService_HashRefreshToken_Call {
	return &TokenService_HashRefreshToken_Call{Call: _e.mock.On("HashRefreshToken", _a0)}
}

func (_c *TokenService_HashRefreshToken_Call) Run(run func(_a0 token.RefreshToken)) *TokenService_HashRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(token.RefreshToken))
	})
	return _c
}

func (_c *TokenService_HashRefreshToken_Call) Return(_a0 session.RefreshTokenHash, _a1 error) *TokenService_HashRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_HashRefreshToken_Call) RunAndReturn(run func(token.RefreshToken) (session.RefreshTokenHash, error)) *TokenService_HashRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
