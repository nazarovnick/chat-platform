syntax = "proto3";

package github.com.nazarovnick.chat_platform.friendship;

import "api/proto/v1/friendship/messages.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "/friendship/v1;v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Friendship Service API"
    version: "1.0.0"
    description:
      "API for managing friendship interactions between users, "
      "including sending, accepting, declining, and removing friend requests."
    contact: {
      name: "Friendship Service Team"
      url: "https://github.com/nazarovnick"
    }
    license: {
      name: "MIT License"
      url: "https://opensource.org/licenses/MIT"
    }
  }
  external_docs: {
    url: "https://github.com/nazarovnick/chat-platform/services/friendship"
    description: "Full documentation and source code"
  }
  schemes: HTTP
  schemes: HTTPS
};

// FriendshipService defines the API for managing friend
// relationships between users
service FriendshipService {
  // RequestFriend sends a friend request from one user to another
  rpc RequestFriend(SendFriendRequest) returns (SendFriendResponse) {
    option (google.api.http) = {
      post: "/api/v1/friends/request"
      body: "*"
    };
  }

  // AcceptFriend approves a pending friend request from another user
  rpc AcceptFriend(AcceptFriendRequest) returns (AcceptFriendResponse) {
    option (google.api.http) = {
      post: "/api/v1/friends/accept"
      body: "*"
    };
  }

  // DeclineFriend rejects a pending friend request from another user
  rpc DeclineFriend(DeclineFriendRequest) returns (DeclineFriendResponse) {
    option (google.api.http) = {
      post: "/api/v1/friends/decline"
      body: "*"
    };
  }

  // RemoveFriend removes an existing friend from the user's friend list
  rpc RemoveFriend(RemoveFriendRequest) returns (RemoveFriendResponse) {
    option (google.api.http) = {
      post: "/api/v1/friends/remove"
      body: "*"
    };
  }

  // GetFriends returns a list of user IDs representing the user's friends
  rpc GetFriends(GetFriendsRequest) returns (GetFriendsResponse) {
    option (google.api.http) = {get: "/api/v1/friends/{user_uuid}"};
  }
}
