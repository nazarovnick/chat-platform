// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/v1/friendship/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FriendshipService_RequestFriend_FullMethodName = "/github.com.nazarovnick.chat_platform.friendship.FriendshipService/RequestFriend"
	FriendshipService_AcceptFriend_FullMethodName  = "/github.com.nazarovnick.chat_platform.friendship.FriendshipService/AcceptFriend"
	FriendshipService_DeclineFriend_FullMethodName = "/github.com.nazarovnick.chat_platform.friendship.FriendshipService/DeclineFriend"
	FriendshipService_RemoveFriend_FullMethodName  = "/github.com.nazarovnick.chat_platform.friendship.FriendshipService/RemoveFriend"
	FriendshipService_GetFriends_FullMethodName    = "/github.com.nazarovnick.chat_platform.friendship.FriendshipService/GetFriends"
)

// FriendshipServiceClient is the client API for FriendshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FriendshipService defines the API for managing friend
// relationships between users
type FriendshipServiceClient interface {
	// RequestFriend sends a friend request from one user to another
	RequestFriend(ctx context.Context, in *SendFriendRequest, opts ...grpc.CallOption) (*SendFriendResponse, error)
	// AcceptFriend approves a pending friend request from another user
	AcceptFriend(ctx context.Context, in *AcceptFriendRequest, opts ...grpc.CallOption) (*AcceptFriendResponse, error)
	// DeclineFriend rejects a pending friend request from another user
	DeclineFriend(ctx context.Context, in *DeclineFriendRequest, opts ...grpc.CallOption) (*DeclineFriendResponse, error)
	// RemoveFriend removes an existing friend from the user's friend list
	RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*RemoveFriendResponse, error)
	// GetFriends returns a list of user IDs representing the user's friends
	GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error)
}

type friendshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendshipServiceClient(cc grpc.ClientConnInterface) FriendshipServiceClient {
	return &friendshipServiceClient{cc}
}

func (c *friendshipServiceClient) RequestFriend(ctx context.Context, in *SendFriendRequest, opts ...grpc.CallOption) (*SendFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendFriendResponse)
	err := c.cc.Invoke(ctx, FriendshipService_RequestFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) AcceptFriend(ctx context.Context, in *AcceptFriendRequest, opts ...grpc.CallOption) (*AcceptFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptFriendResponse)
	err := c.cc.Invoke(ctx, FriendshipService_AcceptFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) DeclineFriend(ctx context.Context, in *DeclineFriendRequest, opts ...grpc.CallOption) (*DeclineFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeclineFriendResponse)
	err := c.cc.Invoke(ctx, FriendshipService_DeclineFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*RemoveFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFriendResponse)
	err := c.cc.Invoke(ctx, FriendshipService_RemoveFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) GetFriends(ctx context.Context, in *GetFriendsRequest, opts ...grpc.CallOption) (*GetFriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendsResponse)
	err := c.cc.Invoke(ctx, FriendshipService_GetFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendshipServiceServer is the server API for FriendshipService service.
// All implementations must embed UnimplementedFriendshipServiceServer
// for forward compatibility.
//
// FriendshipService defines the API for managing friend
// relationships between users
type FriendshipServiceServer interface {
	// RequestFriend sends a friend request from one user to another
	RequestFriend(context.Context, *SendFriendRequest) (*SendFriendResponse, error)
	// AcceptFriend approves a pending friend request from another user
	AcceptFriend(context.Context, *AcceptFriendRequest) (*AcceptFriendResponse, error)
	// DeclineFriend rejects a pending friend request from another user
	DeclineFriend(context.Context, *DeclineFriendRequest) (*DeclineFriendResponse, error)
	// RemoveFriend removes an existing friend from the user's friend list
	RemoveFriend(context.Context, *RemoveFriendRequest) (*RemoveFriendResponse, error)
	// GetFriends returns a list of user IDs representing the user's friends
	GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error)
	mustEmbedUnimplementedFriendshipServiceServer()
}

// UnimplementedFriendshipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFriendshipServiceServer struct{}

func (UnimplementedFriendshipServiceServer) RequestFriend(context.Context, *SendFriendRequest) (*SendFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFriend not implemented")
}
func (UnimplementedFriendshipServiceServer) AcceptFriend(context.Context, *AcceptFriendRequest) (*AcceptFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriend not implemented")
}
func (UnimplementedFriendshipServiceServer) DeclineFriend(context.Context, *DeclineFriendRequest) (*DeclineFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineFriend not implemented")
}
func (UnimplementedFriendshipServiceServer) RemoveFriend(context.Context, *RemoveFriendRequest) (*RemoveFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedFriendshipServiceServer) GetFriends(context.Context, *GetFriendsRequest) (*GetFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedFriendshipServiceServer) mustEmbedUnimplementedFriendshipServiceServer() {}
func (UnimplementedFriendshipServiceServer) testEmbeddedByValue()                           {}

// UnsafeFriendshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendshipServiceServer will
// result in compilation errors.
type UnsafeFriendshipServiceServer interface {
	mustEmbedUnimplementedFriendshipServiceServer()
}

func RegisterFriendshipServiceServer(s grpc.ServiceRegistrar, srv FriendshipServiceServer) {
	// If the following call pancis, it indicates UnimplementedFriendshipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FriendshipService_ServiceDesc, srv)
}

func _FriendshipService_RequestFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).RequestFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_RequestFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).RequestFriend(ctx, req.(*SendFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_AcceptFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).AcceptFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_AcceptFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).AcceptFriend(ctx, req.(*AcceptFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_DeclineFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).DeclineFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_DeclineFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).DeclineFriend(ctx, req.(*DeclineFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).RemoveFriend(ctx, req.(*RemoveFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_GetFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).GetFriends(ctx, req.(*GetFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendshipService_ServiceDesc is the grpc.ServiceDesc for FriendshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.nazarovnick.chat_platform.friendship.FriendshipService",
	HandlerType: (*FriendshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestFriend",
			Handler:    _FriendshipService_RequestFriend_Handler,
		},
		{
			MethodName: "AcceptFriend",
			Handler:    _FriendshipService_AcceptFriend_Handler,
		},
		{
			MethodName: "DeclineFriend",
			Handler:    _FriendshipService_DeclineFriend_Handler,
		},
		{
			MethodName: "RemoveFriend",
			Handler:    _FriendshipService_RemoveFriend_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _FriendshipService_GetFriends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/friendship/service.proto",
}
